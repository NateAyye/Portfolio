/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MyWorkIndexImport } from './routes/myWork/index'
import { Route as MyWorkProjectIdImport } from './routes/myWork/$projectId'

// Create Virtual Routes

const ContactMeLazyImport = createFileRoute('/contact-me')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ContactMeLazyRoute = ContactMeLazyImport.update({
  id: '/contact-me',
  path: '/contact-me',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact-me.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const MyWorkIndexRoute = MyWorkIndexImport.update({
  id: '/myWork/',
  path: '/myWork/',
  getParentRoute: () => rootRoute,
} as any)

const MyWorkProjectIdRoute = MyWorkProjectIdImport.update({
  id: '/myWork/$projectId',
  path: '/myWork/$projectId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact-me': {
      id: '/contact-me'
      path: '/contact-me'
      fullPath: '/contact-me'
      preLoaderRoute: typeof ContactMeLazyImport
      parentRoute: typeof rootRoute
    }
    '/myWork/$projectId': {
      id: '/myWork/$projectId'
      path: '/myWork/$projectId'
      fullPath: '/myWork/$projectId'
      preLoaderRoute: typeof MyWorkProjectIdImport
      parentRoute: typeof rootRoute
    }
    '/myWork/': {
      id: '/myWork/'
      path: '/myWork'
      fullPath: '/myWork'
      preLoaderRoute: typeof MyWorkIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/contact-me': typeof ContactMeLazyRoute
  '/myWork/$projectId': typeof MyWorkProjectIdRoute
  '/myWork': typeof MyWorkIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/contact-me': typeof ContactMeLazyRoute
  '/myWork/$projectId': typeof MyWorkProjectIdRoute
  '/myWork': typeof MyWorkIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/contact-me': typeof ContactMeLazyRoute
  '/myWork/$projectId': typeof MyWorkProjectIdRoute
  '/myWork/': typeof MyWorkIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/contact-me' | '/myWork/$projectId' | '/myWork'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/contact-me' | '/myWork/$projectId' | '/myWork'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact-me'
    | '/myWork/$projectId'
    | '/myWork/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ContactMeLazyRoute: typeof ContactMeLazyRoute
  MyWorkProjectIdRoute: typeof MyWorkProjectIdRoute
  MyWorkIndexRoute: typeof MyWorkIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  ContactMeLazyRoute: ContactMeLazyRoute,
  MyWorkProjectIdRoute: MyWorkProjectIdRoute,
  MyWorkIndexRoute: MyWorkIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/contact-me",
        "/myWork/$projectId",
        "/myWork/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/contact-me": {
      "filePath": "contact-me.lazy.tsx"
    },
    "/myWork/$projectId": {
      "filePath": "myWork/$projectId.tsx"
    },
    "/myWork/": {
      "filePath": "myWork/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
